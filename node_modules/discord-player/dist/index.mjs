import DiscordPlayer from './index.js';

const {
	AF_NIGHTCORE_RATE,
	AF_VAPORWAVE_RATE,
	AFilterGraph,
	AsyncQueue,
	AsyncQueueEntry,
	AudioFilters,
	AudioPlayer,
	BASS_EQ_BANDS,
	BaseExtractor,
	BiquadFilterType,
	Context,
	DependencyReportGenerator,
	DiscordPlayerQueryResultCache,
	EqualizerConfigurationPreset,
	ExtractorExecutionContext,
	FFMPEG_ARGS_PIPED,
	FFMPEG_ARGS_STRING,
	FFMPEG_SRATE_REGEX,
	FFmpegFilterer,
	FiltersChain,
	GuildNodeManager,
	GuildQueue,
	GuildQueueAudioFilters,
	GuildQueueEvent,
	GuildQueueHistory,
	GuildQueuePlayerNode,
	GuildQueueStatistics,
	LrcLib,
	PCMAudioFilters,
	Player,
	PlayerEvent,
	PlayerEventsEmitter,
	Playlist,
	Q_BUTTERWORTH,
	QueryCache,
	QueryResolver,
	QueryType,
	QueueRepeatMode,
	SearchResult,
	SequentialBucket,
	SerializedType,
	StreamDispatcher,
	Track,
	TrackSkipReason,
	TypeUtil,
	Util,
	VALIDATE_QUEUE_CAP,
	VoiceUtils,
	VolumeTransformer,
	createAudioPlayer,
	createContext,
	createErisCompat,
	createFFmpegStream,
	decode,
	deserialize,
	encode,
	getVoiceConnection,
	getVoiceConnections,
	isErisProxy,
	joinVoiceChannel,
	onAfterCreateStream,
	onBeforeCreateStream,
	serialize,
	tryIntoThumbnailString,
	useContext,
	useHistory,
	useMainPlayer,
	useMetadata,
	usePlayer,
	useQueue,
	useTimeline,
	useVolume,
	version,
	FFmpeg,
	createFFmpegArgs
} = DiscordPlayer;

export {
	AF_NIGHTCORE_RATE,
	AF_VAPORWAVE_RATE,
	AFilterGraph,
	AsyncQueue,
	AsyncQueueEntry,
	AudioFilters,
	AudioPlayer,
	BASS_EQ_BANDS,
	BaseExtractor,
	BiquadFilterType,
	Context,
	DependencyReportGenerator,
	DiscordPlayerQueryResultCache,
	EqualizerConfigurationPreset,
	ExtractorExecutionContext,
	FFMPEG_ARGS_PIPED,
	FFMPEG_ARGS_STRING,
	FFMPEG_SRATE_REGEX,
	FFmpegFilterer,
	FiltersChain,
	GuildNodeManager,
	GuildQueue,
	GuildQueueAudioFilters,
	GuildQueueEvent,
	GuildQueueHistory,
	GuildQueuePlayerNode,
	GuildQueueStatistics,
	LrcLib,
	PCMAudioFilters,
	Player,
	PlayerEvent,
	PlayerEventsEmitter,
	Playlist,
	Q_BUTTERWORTH,
	QueryCache,
	QueryResolver,
	QueryType,
	QueueRepeatMode,
	SearchResult,
	SequentialBucket,
	SerializedType,
	StreamDispatcher,
	Track,
	TrackSkipReason,
	TypeUtil,
	Util,
	VALIDATE_QUEUE_CAP,
	VoiceUtils,
	VolumeTransformer,
	createAudioPlayer,
	createContext,
	createErisCompat,
	createFFmpegStream,
	decode,
	deserialize,
	encode,
	getVoiceConnection,
	getVoiceConnections,
	isErisProxy,
	joinVoiceChannel,
	onAfterCreateStream,
	onBeforeCreateStream,
	serialize,
	tryIntoThumbnailString,
	useContext,
	useHistory,
	useMainPlayer,
	useMetadata,
	usePlayer,
	useQueue,
	useTimeline,
	useVolume,
	version,
	FFmpeg,
	createFFmpegArgs
};